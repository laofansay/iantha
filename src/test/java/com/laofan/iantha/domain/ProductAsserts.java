package com.laofan.iantha.domain;

import static com.laofan.iantha.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getTransCode()).as("check transCode").isEqualTo(actual.getTransCode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getImages()).as("check images").isEqualTo(actual.getImages()))
            .satisfies(e -> assertThat(e.getKeywords()).as("check keywords").isEqualTo(actual.getKeywords()))
            .satisfies(e -> assertThat(e.getMetadata()).as("check metadata").isEqualTo(actual.getMetadata()))
            .satisfies(
                e ->
                    assertThat(e.getGuidePrice())
                        .as("check guidePrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGuidePrice())
            )
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(
                e ->
                    assertThat(e.getShowPrice()).as("check showPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getShowPrice())
            )
            .satisfies(e -> assertThat(e.getDiscount()).as("check discount").isEqualTo(actual.getDiscount()))
            .satisfies(e -> assertThat(e.getStock()).as("check stock").isEqualTo(actual.getStock()))
            .satisfies(e -> assertThat(e.getIsPhysical()).as("check isPhysical").isEqualTo(actual.getIsPhysical()))
            .satisfies(e -> assertThat(e.getIsAvailable()).as("check isAvailable").isEqualTo(actual.getIsAvailable()))
            .satisfies(e -> assertThat(e.getIsFeatured()).as("check isFeatured").isEqualTo(actual.getIsFeatured()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getSellCount()).as("check sellCount").isEqualTo(actual.getSellCount()))
            .satisfies(e -> assertThat(e.getStockCount()).as("check stockCount").isEqualTo(actual.getStockCount()))
            .satisfies(e -> assertThat(e.getShelvesStatus()).as("check shelvesStatus").isEqualTo(actual.getShelvesStatus()))
            .satisfies(e -> assertThat(e.getShelvesDate()).as("check shelvesDate").isEqualTo(actual.getShelvesDate()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {}
}
