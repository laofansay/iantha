package com.laofan.iantha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BabyLabelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabyLabelAllPropertiesEquals(BabyLabel expected, BabyLabel actual) {
        assertBabyLabelAutoGeneratedPropertiesEquals(expected, actual);
        assertBabyLabelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabyLabelAllUpdatablePropertiesEquals(BabyLabel expected, BabyLabel actual) {
        assertBabyLabelUpdatableFieldsEquals(expected, actual);
        assertBabyLabelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabyLabelAutoGeneratedPropertiesEquals(BabyLabel expected, BabyLabel actual) {
        assertThat(expected)
            .as("Verify BabyLabel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabyLabelUpdatableFieldsEquals(BabyLabel expected, BabyLabel actual) {
        assertThat(expected)
            .as("Verify BabyLabel relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getLabelCate()).as("check labelCate").isEqualTo(actual.getLabelCate()))
            .satisfies(e -> assertThat(e.getLabelCode()).as("check labelCode").isEqualTo(actual.getLabelCode()))
            .satisfies(e -> assertThat(e.getLabelAttr()).as("check labelAttr").isEqualTo(actual.getLabelAttr()))
            .satisfies(e -> assertThat(e.getIdentify()).as("check identify").isEqualTo(actual.getIdentify()))
            .satisfies(e -> assertThat(e.getRuleReadme()).as("check ruleReadme").isEqualTo(actual.getRuleReadme()))
            .satisfies(e -> assertThat(e.getRuleExpression()).as("check ruleExpression").isEqualTo(actual.getRuleExpression()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabyLabelUpdatableRelationshipsEquals(BabyLabel expected, BabyLabel actual) {
        assertThat(expected)
            .as("Verify BabyLabel relationships")
            .satisfies(e -> assertThat(e.getProducts()).as("check products").isEqualTo(actual.getProducts()));
    }
}
