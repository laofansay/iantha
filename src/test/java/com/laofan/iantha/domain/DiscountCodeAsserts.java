package com.laofan.iantha.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DiscountCodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountCodeAllPropertiesEquals(DiscountCode expected, DiscountCode actual) {
        assertDiscountCodeAutoGeneratedPropertiesEquals(expected, actual);
        assertDiscountCodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountCodeAllUpdatablePropertiesEquals(DiscountCode expected, DiscountCode actual) {
        assertDiscountCodeUpdatableFieldsEquals(expected, actual);
        assertDiscountCodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountCodeAutoGeneratedPropertiesEquals(DiscountCode expected, DiscountCode actual) {
        assertThat(expected)
            .as("Verify DiscountCode auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountCodeUpdatableFieldsEquals(DiscountCode expected, DiscountCode actual) {
        assertThat(expected)
            .as("Verify DiscountCode relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getStock()).as("check stock").isEqualTo(actual.getStock()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPercent()).as("check percent").isEqualTo(actual.getPercent()))
            .satisfies(e -> assertThat(e.getMaxDiscountAmount()).as("check maxDiscountAmount").isEqualTo(actual.getMaxDiscountAmount()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDiscountCodeUpdatableRelationshipsEquals(DiscountCode expected, DiscountCode actual) {
        assertThat(expected)
            .as("Verify DiscountCode relationships")
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()));
    }
}
