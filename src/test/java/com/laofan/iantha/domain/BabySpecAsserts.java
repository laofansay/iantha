package com.laofan.iantha.domain;

import static com.laofan.iantha.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BabySpecAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabySpecAllPropertiesEquals(BabySpec expected, BabySpec actual) {
        assertBabySpecAutoGeneratedPropertiesEquals(expected, actual);
        assertBabySpecAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabySpecAllUpdatablePropertiesEquals(BabySpec expected, BabySpec actual) {
        assertBabySpecUpdatableFieldsEquals(expected, actual);
        assertBabySpecUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabySpecAutoGeneratedPropertiesEquals(BabySpec expected, BabySpec actual) {
        assertThat(expected)
            .as("Verify BabySpec auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabySpecUpdatableFieldsEquals(BabySpec expected, BabySpec actual) {
        assertThat(expected)
            .as("Verify BabySpec relevant properties")
            .satisfies(e -> assertThat(e.getSpecCode()).as("check specCode").isEqualTo(actual.getSpecCode()))
            .satisfies(e -> assertThat(e.getSpecTitle()).as("check specTitle").isEqualTo(actual.getSpecTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getSpecQuantity()).as("check specQuantity").isEqualTo(actual.getSpecQuantity()))
            .satisfies(
                e ->
                    assertThat(e.getGuidePrice())
                        .as("check guidePrice")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGuidePrice())
            )
            .satisfies(
                e ->
                    assertThat(e.getSpecPrice()).as("check specPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSpecPrice())
            )
            .satisfies(
                e ->
                    assertThat(e.getShowPrice()).as("check showPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getShowPrice())
            )
            .satisfies(e -> assertThat(e.getSpecStatus()).as("check specStatus").isEqualTo(actual.getSpecStatus()))
            .satisfies(e -> assertThat(e.getImages()).as("check images").isEqualTo(actual.getImages()))
            .satisfies(e -> assertThat(e.getSellCount()).as("check sellCount").isEqualTo(actual.getSellCount()))
            .satisfies(e -> assertThat(e.getStockCount()).as("check stockCount").isEqualTo(actual.getStockCount()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBabySpecUpdatableRelationshipsEquals(BabySpec expected, BabySpec actual) {
        assertThat(expected)
            .as("Verify BabySpec relationships")
            .satisfies(e -> assertThat(e.getProducts()).as("check products").isEqualTo(actual.getProducts()));
    }
}
